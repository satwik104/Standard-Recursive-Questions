Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order).
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
indexes where x is present in the array (separated by space)
Constraints :
1 <= N <= 10^3
Sample Input :
5
9 8 10 8 8
8
Sample Output :
1 3 4
**************************************code******************************
//Here we dont have to return the output array but its size....
//it will br printed by main function.
//The small_check we are returning is actually the size of output,
//array which keeps on updating when we add a new,
//index value in output array.
int allIndexes(int input[], int size, int x, int output[]) {
    //BASE CASE
 if(size == 0)
     return 0;
    //RECURSIVE CALL TO HANDEL THE N-1 PART OF ARRAY
int small_check= allIndexes(input+1, size-1, x, output);
//CHECK OF THE ELEMENTS WITH X AND RESPECTIVELY DOING WORK
    if(input[0]==x)
    {
		for(int i=small_check-1; i>=0; i--)//we use small_check here in
        output[i+1]=output[i]+1;//for becoz output array have nothing in it we need to put index in it from input array
        output[0]=0;
        small_check++;
    }
    else
    {
        for(int i=small_check-1; i>=0; i--)
            output[i]=output[i] + 1;
    }
    return small_check;

}
#include<iostream>
using namespace std;

int main(){
    int n;
    cin >> n;
  
    int *input = new int[n];
    
    for(int i = 0; i < n; i++) {
        cin >> input[i];
    }
    
    int x;
    
    cin >> x;
    
    int *output = new int[n];
    
    int size = allIndexes(input, n, x, output);
    for(int i = 0; i < size; i++) {
        cout << output[i] << " ";
    }
    
    delete [] input;
    
    delete [] output;
    

}
